class AuthCryptographer {
    /** @type [Number] */
    get key2() {
        return this._key2;
    }

    /** @type [Number] */
    get key1() {
        return this._key1;
    }

    /** @type {Number} */
    get outCounter() {
        return this._outCounter;
    }

    /** @type {Number} */
    get inCounter() {
        return this._inCounter;
    }

    constructor() {
        /** @type {Number} */
        this._inCounter = 0;

        /** @type {Number} */
        this._outCounter = 0;

        /** @type [Number] */
        this._key1 = [
            0x9d, 0x90, 0x83, 0x8a, 0xd1, 0x8c, 0xe7, 0xf6, 0x25, 0x28, 0xeb, 0x82, 0x99, 0x64, 0x8f, 0x2e,
            0x2d, 0x40, 0xd3, 0xFA, 0xe1, 0xbc, 0xb7, 0xe6, 0xb5, 0xd8, 0x3b, 0xf2, 0xa9, 0x94, 0x5f, 0x1e,
            0xbd, 0xFA, 0x23, 0x6a, 0xf1, 0xec, 0x87, 0xd6, 0x45, 0x88, 0x8b, 0x62, 0xb9, 0xc4, 0x2f, 0x0E,
            0x4d, 0xA0, 0x73, 0xda, 0x01, 0x1c, 0x57, 0xc6, 0xd5, 0x38, 0xdb, 0xD2, 0xc9, 0xf4, 0xff, 0xfe,
            0xdd, 0x50, 0xc3, 0x4a, 0x11, 0x4c, 0x27, 0xb6, 0x65, 0xe8, 0x2b, 0x42, 0xd9, 0x24, 0xcf, 0xee,
            0x6d, 0x00, 0x13, 0xba, 0x21, 0x7c, 0xf7, 0xa6, 0xf5, 0x98, 0x7b, 0xb2, 0xe9, 0x54, 0x9f, 0xde,
            0xfd, 0xb0, 0x63, 0x2a, 0x31, 0xac, 0xc7, 0x96, 0x85, 0x48, 0xcb, 0x22, 0xf9, 0x84, 0x6f, 0xce,
            0x8d, 0x60, 0xb3, 0x9a, 0x41, 0xDC, 0x97, 0x86, 0x15, 0xf8, 0x1b, 0x92, 0x09, 0xB4, 0x3f, 0xBE,
            0x1d, 0x10, 0x03, 0x0A, 0x51, 0x0C, 0x67, 0x76, 0xa5, 0xa8, 0x6b, 0x02, 0x19, 0xe4, 0x0F, 0xae,
            0xad, 0xc0, 0x53, 0x7a, 0x61, 0x3C, 0x37, 0x66, 0x35, 0x58, 0xbb, 0x72, 0x29, 0x14, 0xdf, 0x9e,
            0x3d, 0x70, 0xa3, 0xea, 0x71, 0x6c, 0x07, 0x56, 0xc5, 0x08, 0x0B, 0xe2, 0x39, 0x44, 0xaf, 0x8e,
            0xcd, 0x20, 0xf3, 0x5A, 0x81, 0x9c, 0xd7, 0x46, 0x55, 0xb8, 0x5b, 0x52, 0x49, 0x74, 0x7f, 0x7e,
            0x5d, 0xd0, 0x43, 0xca, 0x91, 0xcc, 0xa7, 0x36, 0xe5, 0x68, 0xab, 0xc2, 0x59, 0xa4, 0x4f, 0x6E,
            0xed, 0x80, 0x93, 0x3a, 0xa1, 0xfc, 0x77, 0x26, 0x75, 0x18, 0xfb, 0x32, 0x69, 0xd4, 0x1f, 0x5e,
            0x7d, 0x30, 0xe3, 0xAA, 0xb1, 0x2c, 0x47, 0x16, 0x05, 0xC8, 0x4b, 0xa2, 0x79, 0x04, 0xef, 0x4e,
            0x0D, 0xe0, 0x33, 0x1a, 0xc1, 0x5c, 0x17, 0x06, 0x95, 0x78, 0x9b, 0x12, 0x89, 0x34, 0xbf, 0x3e
        ];

        /** @type [Number] */
        this._key2 = [
            0x62, 0x4f, 0xe8, 0x15, 0xde, 0xeb, 0x04, 0x91, 0x1a, 0xc7, 0xe0, 0x4d, 0x16, 0xe3, 0x7c, 0x49,
            0xD2, 0x3f, 0xd8, 0x85, 0x4e, 0xdb, 0xf4, 0x01, 0x8a, 0xb7, 0xd0, 0xbd, 0x86, 0xd3, 0x6c, 0xb9,
            0x42, 0x2f, 0xC8, 0xf5, 0xBE, 0xcb, 0xe4, 0x71, 0xFA, 0xa7, 0xc0, 0x2d, 0xf6, 0xc3, 0x5c, 0x29,
            0xb2, 0x1f, 0xb8, 0x65, 0x2e, 0xbb, 0xd4, 0xe1, 0x6a, 0x97, 0xb0, 0x9d, 0x66, 0xb3, 0x4c, 0x99,
            0x22, 0x0F, 0xa8, 0xd5, 0x9e, 0xab, 0xc4, 0x51, 0xda, 0x87, 0xA0, 0x0D, 0xd6, 0xa3, 0x3C, 0x09,
            0x92, 0xff, 0x98, 0x45, 0x0E, 0x9b, 0xB4, 0xc1, 0x4a, 0x77, 0x90, 0x7d, 0x46, 0x93, 0x2c, 0x79,
            0x02, 0xef, 0x88, 0xb5, 0x7e, 0x8b, 0xa4, 0x31, 0xba, 0x67, 0x80, 0xed, 0xb6, 0x83, 0x1c, 0xe9,
            0x72, 0xdf, 0x78, 0x25, 0xee, 0x7b, 0x94, 0xa1, 0x2a, 0x57, 0x70, 0x5d, 0x26, 0x73, 0x0C, 0x59,
            0xe2, 0xcf, 0x68, 0x95, 0x5e, 0x6b, 0x84, 0x11, 0x9a, 0x47, 0x60, 0xcd, 0x96, 0x63, 0xfc, 0xc9,
            0x52, 0xbf, 0x58, 0x05, 0xce, 0x5b, 0x74, 0x81, 0x0A, 0x37, 0x50, 0x3d, 0x06, 0x53, 0xec, 0x39,
            0xc2, 0xaf, 0x48, 0x75, 0x3e, 0x4b, 0x64, 0xf1, 0x7a, 0x27, 0x40, 0xad, 0x76, 0x43, 0xDC, 0xa9,
            0x32, 0x9f, 0x38, 0xe5, 0xae, 0x3b, 0x54, 0x61, 0xea, 0x17, 0x30, 0x1d, 0xE6, 0x33, 0xcc, 0x19,
            0xa2, 0x8f, 0x28, 0x55, 0x1E, 0x2b, 0x44, 0xd1, 0x5A, 0x07, 0x20, 0x8d, 0x56, 0x23, 0xbc, 0x89,
            0x12, 0x7f, 0x18, 0xc5, 0x8e, 0x1b, 0x34, 0x41, 0xca, 0xf7, 0x10, 0xfd, 0xc6, 0x13, 0xac, 0xf9,
            0x82, 0x6f, 0x08, 0x35, 0xfe, 0x0B, 0x24, 0xb1, 0x3a, 0xe7, 0x00, 0x6d, 0x36, 0x03, 0x9c, 0x69,
            0xf2, 0x5f, 0xf8, 0xa5, 0x6E, 0xfb, 0x14, 0x21, 0xAA, 0xd7, 0xF0, 0xdd, 0xa6, 0xf3, 0x8C, 0xd9
        ];
    }

    /**
     * @param {Buffer} buffer
     */
    decrypt(buffer) {
        for (let b = 0; b < buffer.length; b++) {
            buffer.writeUInt8(buffer.readUInt8(b) ^ 0xAB, b);
            buffer.writeUInt8(((buffer.readUInt8(b) << 4) | (buffer.readUInt8(b) >> 4)) & 0xFF, b);
            buffer.writeUInt8(this._key2[this._inCounter >> 8] ^ buffer.readUInt8(b), b);
            buffer.writeUInt8(this._key1[this._inCounter & 0xFF] ^ buffer.readUInt8(b), b);

            this._inCounter = (this._inCounter + 1) & 0xFFFF;
        }
    }

    /**
     * @param {Buffer} buffer
     */
    encrypt(buffer) {
        for (let b = 0; b < buffer.length; b++) {
            buffer.writeUInt8(buffer.readUInt8(b) ^ 0xAB, b);
            buffer.writeUInt8(((buffer.readUInt8(b) << 4) | (buffer.readUInt8(b) >> 4)) & 0xFF, b);
            buffer.writeUInt8(this._key2[this._outCounter >> 8] ^ buffer.readUInt8(b), b);
            buffer.writeUInt8(this._key1[this._outCounter & 0xFF] ^ buffer.readUInt8(b), b);

            this._outCounter = (this._outCounter + 1) & 0xFFFF;
        }
    }
}

module.exports = AuthCryptographer;